import requests
import json
from datetime import datetime
import OpenSSL.crypto
import base64
import hashlib
import uuid

class ActivityPub:
    private_key = None
    def __init__(self):
        with open('private.pem', 'rb') as file:
            private_key_data = file.read()
            self.private_key = OpenSSL.crypto.load_privatekey(OpenSSL.crypto.FILETYPE_PEM, private_key_data)

    def send_lemmy_pm(self, message, username, domain):
        with open('lemmy-pm.json', 'r') as file:
            document = json.loads(file.read())
        documebnt
        self.send_pm(document, domain)

    def send_pm(self, document, domain):
        document["id"] = f"https://overseer.dbzer0.com/{uuid.uuid4()}"
        document["object"]["id"] = f"https://overseer.dbzer0.com/{uuid.uuid4()}"
        document["object"]["published"] = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")
        document = json.dumps(document, indent=4)
        digest = hashlib.sha256(document.encode('utf-8')).digest()
        encoded_digest = base64.b64encode(digest).decode('utf-8')
        digest_header = "SHA-256=" + encoded_digest
        date = datetime.utcnow().strftime('%a, %d %b %Y %H:%M:%S GMT')

        signed_string = f"(request-target): post /inbox\nhost: {domain}\ndate: {date}\ndigest: {digest_header}"
        signature = OpenSSL.crypto.sign(self.private_key, signed_string.encode('utf-8'), 'sha256')
        encoded_signature = base64.b64encode(signature).decode('utf-8')

        header = f'keyId="https://overseer.dbzer0.com/api/v1/user/overseer",headers="(request-target) host date digest",signature="{encoded_signature}"'
        headers = {
            'Host': domain,
            'Date': date,
            'Signature': header,
            'Digest': digest_header,
            'Content-Type': 'application/ld+json; profile="http://www.w3.org/ns/activitystreams"'
        }
        url = f"https://{domain}/inbox"
        response = requests.post(url, data=document, headers=headers)
        return response.ok
